import { useRouter } from "next/router";
import Link from "next/link";
import Head from "next/head";
import styles from "../../styles/coffee-store.module.css";
import Image from "next/image";
import cls from "classnames";
import star from "../../public/star.svg";
import nearMe from "../../public/nearMe.svg";
import places from "../../public/places.svg";
import { fetchCoffeeStores } from "../../lib/coffee-stores";
import { useContext, useEffect, useState } from "react";
import { StoreContext } from "../../context/store-context";
import { isEmpty } from "../../utils";
import useSWR from "swr";

export async function getStaticProps(context) {
  const data = await fetchCoffeeStores();
  const found = data.find((store) => store.id == context.params.id);

  return {
    props: {
      storesFromGSP: found ? found : {},
    }, // will be passed to the page component as props
  };
}

export async function getStaticPaths() {
  const data = await fetchCoffeeStores();
  return {
    paths: data.map((store) => ({
      params: { id: store.id.toString() },
    })),
    fallback: true,
  };
}

const CoffeStore = (props) => {
  const router = useRouter();
  const id = router.asPath.split("/")[2];
  const fetcher = (url) => fetch(url).then((res) => res.json());
  const { data, error,isLoading } = useSWR(
    `/api/getCoffeeStoreById?id=${id}`,
    fetcher,
    { refreshInterval: 2000 }
  );
  const [votingCount, setVotingCount] = useState(0);
  const [store, setCoffeeStores] = useState(props.storesFromGSP);
  const { state } = useContext(StoreContext);
  const { coffeeStores: coffeeStoresFromContext } = state;

  

  useEffect(() => {

    if (data && data.length > 0) {
      setCoffeeStores(data[0]);
      setVotingCount(data[0].voting);
    }
  }, [data]);

  useEffect(() => {
    if (props.storesFromGSP && isEmpty(props.storesFromGSP)) {
      if (coffeeStoresFromContext.length > 0) {
        const coffeeStoreFromContext = coffeeStoresFromContext.find(
          (store) => store.id == id
        );

        if (coffeeStoreFromContext) {
          setCoffeeStores(coffeeStoreFromContext);
          handleCreateCoffeeStore(coffeeStoreFromContext);
        }
      }
    }
    if (props.storesFromGSP && !isEmpty(props.storesFromGSP)){
    handleCreateCoffeeStore(props.storesFromGSP);
    }
  }, [id, props, props.storesFromGSP,coffeeStoresFromContext]);

  const handleCreateCoffeeStore = async (store) => {
    try {
      const response = await fetch("/api/createCoffeeStore", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id: `${store.id}`,
          name: store.name,
          address: store.address || "",
          country: store.country || "",
          voting: 0,
          imgUrl: store.imgUrl,
        }),
      });

      const data = await response.json();
      if (data && data.length > 0) {
        setCoffeeStores(data[0]);
      }
    } catch (err) {
      console.log("Error: ", err);
    }
  };
  if (router.isFallback) {
    return <div className={styles.rollerContainer}><div className={styles.ldsroller}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>
  }
  if (isLoading) {
    return <div className={styles.rollerContainer}><div className={styles.ldsroller}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>
  }
  const handleUpvoteButton = async () => {
    try {
      const response = await fetch("/api/favouriteCoffeeStoreById", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          id,
        }),
      });

      const data = await response.json();
      if (data && data.length > 0) {
        setCoffeeStores(data[0]);
        setVotingCount(data[0].voting);
      }
    } catch (err) {
      console.log("Error: ", err);
    }
  };
  const { name, address, country, imgUrl } = store || {};
  return (
    <div className={styles.layout}>
      <Head>
        <title>{name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <div className={styles.col1}>
          <div className={styles.backToHomeLink}>
            <Link href="/">&#060;- Back to Home</Link>
          </div>
          <div className={styles.nameWrapper}>
            <h1 className={styles.name}>{name || ""}</h1>
          </div>
          <Image
            src={imgUrl || ""}
            alt="coffee-store"
            priority={true}
            width={600}
            height={500}
            className={styles.storeImg}
          ></Image>
        </div>
        <div className={cls("glassWithoutHover", styles.col2)}>
          <div className={styles.iconWrapper}>
            <Image src={places} width={24} height={24} alt="place" />
            <p className={styles.text}>{address || ""}</p>
          </div>

          <div className={styles.iconWrapper}>
            <Image src={nearMe} width={24} height={24} alt="nearme" />
            <p className={styles.text}>{country || ""}</p>
          </div>

          <div className={styles.iconWrapper}>
            <Image src={star} width={24} height={24} alt="star" />
            <p className={styles.text}>{votingCount}</p>
          </div>

          <button className={styles.upvoteButton} onClick={handleUpvoteButton}>
            Up vote!
          </button>
        </div>
      </div>
    </div>
  );
};

export default CoffeStore;
